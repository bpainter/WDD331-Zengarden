// ----------------------------------------------------
// Variables
// ----------------------------------------------------

// Colors
// Primary Colors
$xx-dark-blue: #00355e; // Secondary blue, also used for visualizations
$x-dark-blue: #00467f;
$dark-blue: #0a61ad;
$blue: #007cd3; // Primary blue, also used for visualizations
$light-blue: #139ceb;
$x-light-blue: #21b7ff;

// Secondary Colors
$x-dark-red: #8F2E0D;
$dark-red: #B54B26;
$red: #FF4500;
$light-red: #F59573;
$x-light-red: #FFBAA3;

// Alerts
$green: #5aa832; // Also used for visualizations, positive result
$red: #d31c3c; // Also used for visualizations, negative result
$orange: #ec9a2f;

// Grays
$xx-dark-gray: #222129;
$x-dark-gray: #3a3c44;
$dark-gray: #656963;
$gray: #7c7c89;
$light-gray: #9a9fac;
$x-light-gray: #c6c9da;
$xx-light-gray: #e3e7ea;

// Misc
$white: #ffffff;

// Sass map with branded colors. These are the values that should
// be used in any Sass files.
// Call these in your Sass with (defaults to the color in 'base'): 
// 
//  Usage:
//     background-color: brand-color(primary, dark) ;

$colors: (
  primary: (
    base: $blue,
    light: $light-blue,
    x-light: $x-light-blue,
    dark: $dark-blue,
    x-dark: $x-dark-blue,
    xx-dark: $xx-dark-blue
  ),
  secondary: (
    base: $red,
    light: $light-red,
    x-light: $x-light-red,
    dark: $dark-red,
    x-dark: $x-dark-red,
  ),
  gray: (
    base: $gray,
    light: $light-gray,
    x-light: $x-light-gray,
    xx-light: $xx-light-gray, 
    dark: $dark-gray,
    x-dark: $x-dark-gray,
    xx-dark: $xx-dark-gray
  ),
  muted: (
    base: $white
  ),
  alert: (
    info: $gray,
    success: $green,
    warning: $orange,
    danger: $red
  )
);

// ---------------------------------------------------------------
// Spacing
// ---------------------------------------------------------------
// Generates a Sass map to handle the spacing specific to margin 
// and padding. Calculations are using a modular scale, not linear.
// $spacing: (
//   xxs: -,
//   xs: -,
//   s: -,
//   m: -,
//   l: -,
//   xl: -,
//   xxl: -,
// );
// 
// Usage:
//   margin-bottom: spacing(s);
//   padding: spacing(xl);
// ---------------------------------------------------------------
// $modular-spacing-base-size: 2px;
// @each $size in $modular-scale-sizes {
//   $i: index($modular-scale-sizes, $size);
//   $spacing: (
//     $size: calculateModularScale($i, $modular-spacing-base-size),
//   );
// }
$spacing-scale: (
  xxs: 2px,
  xs: 4px,
  s: 8px,
  m: 16px,
  l: 32px,
  xl: 64px,
  xxl: 128px,
);

// Fonts
$heading-font-family: 'Droid Serif', serif;
$body-font-family: 'Open Sans', sans-serif;
$base-font-size: 18px;

$font-scale: (
  xxs: (.422em, 1.1),
  xs: (.563em, 1.15),
  s: (.75em, 1.2),
  m:( 1em, 1.3),
  l: (1.533em, 1.3),
  xl: (2.177em, 1.3),
  xxl: (4.569em, 1)
);

// Responsive breakpoints
$breakpoints: (
  xxs: 320px,
  xs: 480px,
  s: 640px,
  m: 768px,
  l: 1024px,
  xl: 1480px,
  xxl: 1600px,
);

// ----------------------------------------------------
// Helpers
// ----------------------------------------------------
// Function to return the brand colors from the Sass map
// in the _theme.scss files
@function brand-color($color, $tone: 'base') {
    @return map-get(map-get($colors, $color), $tone);
}

// Function to handle consuming the breakpoints map
@function breakpoint($breakpoint) {
  @return map-get($breakpoints, $breakpoint);
}

// General Breakpoint Mixin
// Sets basic breakpoint values as a mixin based on the
// Sass map of breakpoint values in the theme.scss
// @media rule defaults to 'min-width'
//
// Usage:
//    @include breakpoint(l, min-width) {
//        ...
//    }
@mixin breakpoint($breakpoint, $rule: max-width) {
  @media only screen and (#{$rule}: breakpoint($breakpoint)) {
    @content;
  }
}

// Manage a consistent font scale
@function font-scale($scale) {
  @return map-get($font-scale, $scale);
}

@mixin font-scale($scale) {
  @if type-of(font-scale($scale)) == "list" {
    font-size: nth(font-scale($scale), 1);
    @if (length(font-scale($scale)) > 1) {
      line-height: nth(font-scale($scale), 2);
    }
  }
  @else {
    font-size: font-scale($scale);
  }
}

// Manage a consistent spacing scale
@function spacing($scale) {
  $is-negative: str-slice($scale, 1, 1);
  
  @if $is-negative == '-' {
    // Get the length of the scale
    // that includes the '-' value
    $scale-length: str-length($scale);

    // Slice the scale to remove the '-' value
    $scale-slice: str-slice($scale, 2, $scale-length);
    
    // Get the value from the map
    $scale-value: map-get($spacing-scale, $scale-slice);
    
    // Return the negative value from the map
    @return (-$scale-value);
  } @else {
    // Return the positive value from the map
    @return map-get($spacing-scale, $scale);
  }
}

@mixin equal-spacing($padding) {
  padding: spacing($padding);
}

@mixin offset-spacing($top-bottom-padding, $left-right-padding) {
  padding: spacing($top-bottom-padding) spacing($left-right-padding);
}

@mixin stack($bottom-margin) {
  margin-bottom: spacing($bottom-margin);
}

@mixin inline($right-margin) {
  margin-right: spacing($right-margin);
}


// Divider
@mixin divider($width: 300px) {
  position: relative;

  &:after {
    background: linear-gradient(135deg, brand-color(primary, base) 0%, brand-color(primary, light) 100%);
    content: "";
    height: 12px;
    margin-left: -$width/2;
    position: absolute;
      bottom: -6px;
      left: 50%;
    transform: skew(-40deg);
    width: $width;
  }
}



// ----------------------------------------------------
// Root
// ----------------------------------------------------
// HTML/Body
html {
    background-color: brand-color(gray, xx-light);
    box-sizing: border-box;
    color: brand-color(gray, xx-dark);
    line-height: 1.5;
    font-family: $body-font-family;
    font-size: $base-font-size;
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
    height: 100%;

    @include breakpoint(m) {
      font-size: 14px;
    }
}

*, *:before, *:after {
    box-sizing: inherit;
}

body {
    margin: 0;
    height: 100%;
}

// HTML5 Elements - correct display in older browsers
article,
aside,
footer,
header,
nav,
section,
figcaption,
figure,
main {
  display: block;
}


// images - remove border when inside a link
img {
    border-style: none;
}

// SVG - correct overflow issue in IE
svg:not(:root) {
    overflow: hidden;
}

// ----------------------------------------------------
// Typography
// ----------------------------------------------------
@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,700|Droid+Serif:400,400i,700,700i');

body {
  font-family: $body-font-family;
}

h1, h2, h3, h4, h5, h6 {
  font-family: $heading-font-family;
  margin: 0;
}

h1 {
  @include font-scale(xxl);
  text-transform: uppercase;
}

h2 {
  @include font-scale(xl);
  font-style: italic;
}

h3 {
  @include font-scale(l);
  color: brand-color(primary, base);
  text-transform: uppercase;
}

// ----------------------------------------------------
// Links
// ----------------------------------------------------
a {
  &:link {
    color: brand-color(secondary, dark);
  }
  &:hover,
  &:focus {
    color: brand-color(secondary, base);
  }
}

// ----------------------------------------------------
// Layout
// ----------------------------------------------------
.page-wrapper {
  display: flex;
  flex-wrap: wrap;
}
.intro {
  flex: 0 0 100%;
  order: 1;
  header[role="banner"] {
    @include equal-spacing(xxl);
    background: linear-gradient(135deg, brand-color(primary, x-dark) 0%, brand-color(primary, base) 100%);
    h1, h2 {
      color: brand-color(gray, x-light);
    }
    h2 {
      opacity: .5;
    }
    @include breakpoint(l) {
      @include offset-spacing(xxl, xl);
    }

    @include breakpoint(m) {
      @include offset-spacing(xl, l);
    }

    @include breakpoint(xs) {
      @include offset-spacing(xl, l);
      h1 {
        @include font-scale(xl);
      }
      h2 {
        @include font-scale(l);
      }
    } 
  }

  .summary {
    @include offset-spacing(l, xxl);
    @include font-scale(xl);
    @include divider;
    color: brand-color(gray, light);
    font-weight: 200;
    font-style: italic;
    
    p:last-of-type {
      font-size: 60%;
    }

    @include breakpoint(l) {
      @include offset-spacing(l, xl);
    }
    @include breakpoint(m) {
      @include offset-spacing(s, l);
      @include font-scale(l);
    }
  }

  .preamble {
    @include offset-spacing(xl, xxl);
    background-color: brand-color(gray, x-dark);

    p {
      color: brand-color(gray, x-light);
      max-width: 1000px;
    }

    @include breakpoint(l) {
      @include offset-spacing(xl, xl);
    }

    @include breakpoint(m) {
      @include offset-spacing(l, l);
    }
  }
}

.main {
  padding: spacing(xl) spacing(xxl) spacing(xl) spacing(xl);
  order: 3;
  flex: 0 0 60%;

  @include breakpoint(l) {
    @include equal-spacing(xl);
  }

  @include breakpoint(m) {
    @include offset-spacing(l, l);
  }

  @include breakpoint(s) {
    flex-basis: 100%;
    order: 2;
  }

  .explanation,
  .participation,
  .benefits {
    @include stack(l);
    padding-bottom: spacing(l);

    @include breakpoint(m) {
      padding-bottom: 0;
    }
  }
  .explanation {

  }

  .participation {

  }

  .benefits {
    
  }

  .requirements {
    p:nth-child(5n) {
      padding-bottom: spacing(l);
    }
    [role="contentinfo"] {
      @include font-scale(l);
      color: brand-color(gray, light);
      display: block;
      font-weight: 200;
      font-style: italic;
      padding: spacing(xl) 0 spacing(l);
      position: relative;
      text-align: center;

      @include breakpoint(m) {
        padding: spacing(l) 0 spacing(m);
      }

      &:before {
        background-color: brand-color(gray, x-light);
        content: "";
        display: block;
        height: 1px;
        position: absolute;
          top: 0;
          left: spacing(-xl);
          right: spacing(-xxl);

        @include breakpoint(l) {
          right: spacing(-xl);
        }

        @include breakpoint(m) {
          right: spacing(-l);
        }
      }
    }
  }

  footer {
    @include equal-spacing(l);
    background: linear-gradient(135deg, brand-color(primary, base) 0%, brand-color(primary, light) 100%);
    display: flex;
    justify-content: space-around;
    margin-left: spacing(-xl);
    margin-right: spacing(-xxl);
    margin-bottom: spacing(-xl);

    @include breakpoint(l) {
      margin-right: spacing(-xl);
    }

    @include breakpoint(m) {
      margin-left: spacing(-l);
      margin-right: spacing(-l);
      margin-bottom: spacing(-l);
    }

    a {
      color: brand-color(gray, x-light);
      text-decoration: none;
      &:hover,
      &:focus {
        color: #fff;
        text-decoration: underline;
      }
    }
  }
}

.sidebar {
  padding: spacing(xl) spacing(xl) spacing(xl) spacing(xxl);
  background-color: brand-color(gray, x-light);
  flex: 0 0 40%;
  order: 2;

  @include breakpoint(l) {
    @include equal-spacing(xl);
  }

  @include breakpoint(m) {
    @include equal-spacing(l);
  }

  @include breakpoint(s) {
    flex-basis: 100%;
    order: 3;
    font-size: 13px;
  }

  .wrapper {
    @include breakpoint(s) {
      display: flex;
    }
    
    @include breakpoint(xs) {
      display: block;
    } 
  }

  h3 {
    color: brand-color(gray, dark);
    text-transform: inherit;
  }
  .design-selection {
    @include stack(xl);

    @include breakpoint(m) {
      @include stack(l);
    }

    @include breakpoint(s) {
      flex: 0 0 40%;
      margin-bottom: 0;
    }
  }

  .design-archives {
    @include stack(xl);

    @include breakpoint(m) {
      @include stack(l);
    }

    @include breakpoint(s) {
      margin-bottom: 0;
    }
  }

  .zen-resources {

  }
}